/*
 * Chart.js minimal local version
 * This is a reduced version to handle basic chart functionality
 */

// Create Chart global object
window.Chart = function(ctx, config) {
    console.log('[LOCAL CHART.JS] Creating chart with config:', config);
    
    if (!ctx) {
        console.error('[LOCAL CHART.JS] Canvas context not provided');
        return null;
    }
    
    // Store configuration
    this.config = config || {};
    this.ctx = ctx;
    this.canvas = ctx.canvas;
    this.data = config.data || { datasets: [] };
    this.type = config.type || 'line';
    this.options = config.options || {};
    
    // Add version info
    this.version = '3.7.1-minimal';
    
    // Setup canvas
    if (ctx && ctx.canvas) {
        // Get canvas context
        const canvas = ctx.canvas;
        const container = canvas.parentNode;
        
        // Add placeholder text
        if (container) {
            const placeholderDiv = document.createElement('div');
            placeholderDiv.style.position = 'absolute';
            placeholderDiv.style.top = '0';
            placeholderDiv.style.left = '0';
            placeholderDiv.style.width = '100%';
            placeholderDiv.style.height = '100%';
            placeholderDiv.style.display = 'flex';
            placeholderDiv.style.alignItems = 'center';
            placeholderDiv.style.justifyContent = 'center';
            placeholderDiv.style.color = '#fff';
            placeholderDiv.style.fontSize = '14px';
            placeholderDiv.style.textAlign = 'center';
            placeholderDiv.style.padding = '20px';
            
            // Set placeholder content based on chart type
            if (this.type === 'doughnut' || this.type === 'pie') {
                placeholderDiv.innerHTML = `
                    <div>
                        <h3 style="color: #fff; margin-bottom: 10px;">${config.data.labels ? config.data.labels[0] : 'Financial'} Chart</h3>
                        <div style="color: rgba(255,255,255,0.6); font-size: 12px;">Displaying placeholder chart until Chart.js loads</div>
                    </div>
                `;
            } else {
                placeholderDiv.innerHTML = `
                    <div>
                        <h3 style="color: #fff; margin-bottom: 10px;">${this.type.charAt(0).toUpperCase() + this.type.slice(1)} Chart</h3>
                        <div style="color: rgba(255,255,255,0.6); font-size: 12px;">Displaying placeholder chart until Chart.js loads</div>
                    </div>
                `;
            }
            
            // Clear container and add placeholder
            container.style.position = 'relative';
            container.appendChild(placeholderDiv);
        }
    }
    
    // Store in global collection
    if (!window.Chart.instances) {
        window.Chart.instances = [];
    }
    window.Chart.instances.push(this);
    
    return this;
};

// Add utility functions
Chart.defaults = {
    animation: {
        duration: 1000,
        easing: 'easeOutQuart'
    },
    plugins: {
        tooltip: {}
    }
};

// Add placeholder methods
Chart.prototype.update = function() {
    console.log('[LOCAL CHART.JS] Chart update called');
    return this;
};

Chart.prototype.destroy = function() {
    console.log('[LOCAL CHART.JS] Chart destroy called');
    
    // Find and remove from instances
    if (window.Chart.instances) {
        const index = window.Chart.instances.indexOf(this);
        if (index !== -1) {
            window.Chart.instances.splice(index, 1);
        }
    }
    
    // Clear canvas
    if (this.ctx && this.ctx.clearRect) {
        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
    }
    
    return null;
};

// Register a plugin to render basic charts
Chart.register = function(plugin) {
    console.log('[LOCAL CHART.JS] Plugin registered:', plugin ? plugin.id : 'unknown');
};

// Log initialization
console.log('[LOCAL CHART.JS] Minimal Chart.js initialized. Version:', Chart.version); 